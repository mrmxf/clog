---
# Copyright ©2017-2025  Mr MXF   info@mrmxf.com
# BSD-3-Clause License           https://opensource.org/license/bsd-3-clause/
#       _                  _                                 _____ 
#    __| |   ___   _ __   | |   ___    _   _           ___  |___ / 
#   / _` |  / _ \ | '_ \  | |  / _ \  | | | |  _____  / __|   |_ \ 
#  | (_| | |  __/ | |_) | | | | (_) | | |_| | |_____| \__ \  ___) |
#   \__,_|  \___| | .__/  |_|  \___/   \__, |         |___/ |____/ 
#                 |_|                  |___/                       
#  GitHub Workflow to deploy to an s3 bucket
#
# see on.workflow_call.inputs for params

name: deploy-s3
run-name: 🥷${{ github.actor }} 🏃‍➡️ ${{ github.workflow }}.${{ github.job }}(clog/…/deploy-s3)"
env:
  CLOG_FLOW: "mrmxf/clog/.github/workflows/deploy-s3"

on:
  workflow_call:
    inputs:
      artifact-name:
        required: true
        type: string
      make:
        required: false
        type: string
      bc-from:               # slack notify: engine running the build e.g github
        type: string
      bc-toast:                         # slack notify: the pop up toast message
        type: string
      bc-trigger:                 # slack notify: repo/event triggering the flow
        type: string
    secrets:
      aws_access_key_id:
        required: false
      aws_secret_access_key:
        required: false
      get_clog:
        required: true
      s3_bucket:
        required: true
      webhook_slack:
        required: false

jobs:
  deploy-s3:
    runs-on: ubuntu-latest

    steps:
      - # ---------------------------------------------------------------------
        id: init-clog
        name: init clog
        run: |
          # install clog & set up some of the funky build logic
          eval "${{ secrets.get_clog }}"

          case "${{ github.event_name }}" in

          "pull_request_target")
            # for a PR we checkout the latest pushed commit of the requesting repo
            verb="PR"
            ref="${{ github.event.pull_request.head.sha }}"            # head of the PR commits
            src="${{ github.event.pull_request.head.repo.full_name }}" # head name
            url="${{ github.event.pull_request.head.repo.html_url }}"  # head url
            ;;

          "push" | "workflow_dispatch")
            # for a PUSH we checkout the HEAD of main
            verb="PUSH"
            ref="${{ github.ref }}"                                    # event trigger
            src="${{ github.repository }}"                             # event repo
            url="${{ github.event.repository.html_url }}"              # event human url
            ;;

          "schedule")
            # for a SCHEDULE we checkout the latest production tag on main branch
            verb="SCHEDULE"
            ref="ref/tags/$(clog bc-main-prod-tag)"                    # production tag
            src="${{ github.repository }}"                             # production repo
            url="${{ github.event.repository.html_url }}"              # production human url
            ;;

          esac

          echo "verb=$verb" >> $GITHUB_ENV
          echo "ref=$ref"   >> $GITHUB_ENV
          echo "src=$src"   >> $GITHUB_ENV
          echo "url=$url"   >> $GITHUB_ENV
          
          clog Log -I "Reusable workflow: ${{ env.clog_FLOW}}"
      - # ---------------------------------------------------------------------
        id: checkout
        name: Checkout repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.src }}
          ref:  ${{ env.ref }}
          submodules: recursive
      - # ---------------------------------------------------------------------
        id: artifacts
        name: artifact(${{ inputs.artifact-name }}) → tmp/
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          path: tmp
      - # ---------------------------------------------------------------------
        id: docker
        if:  inputs.docker_ns != '' # ignore if no namespace, fail if _pat empty
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{  inputs.docker_ns }}
          password: ${{ secrets.docker_pat }}
      - # ---------------------------------------------------------------------
        id: deploy-s3
        name: golang deploy artifacts to s3 with clog
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_access_key }}
          S3_BUCKET: ${{ secrets.s3_bucket }}
          MAKE: ${{ inputs.make }}
        run: |
          if [ -z "$MAKE" ]; then 
            # use the standard build if no overrides
            clog build
          else
            clog Log -W "deploy overide provided \$MAKE=\"$MAKE\""
            clog deploy MAKE "$MAKE"
          fi
      - # ---------------------------------------------------------------------
        id: notify
        if: ${{ env.HOOK_SLACK != '' }}
        name: notify-team
        env:
          HOOK_SLACK:  ${{ secrets.webhook_slack }}
          FORCE_FROM: ${{ inputs.bc-from }}
          FORCE_TOAST: ${{ inputs.bc-toast }}
          FORCE_TRIGGER: ${{ inputs.bc-trigger }}
        run: |
          eval "$(clog Source project config); $(clog Crayon)"  # settings+color
          
          artifacts="$(clog bc-artifacts)"
          cat "$artifacts"                              # log the artifacts file

          eval "$(cat $artifacts)"                # create artifacts environment

          for VERB in ${NOTIFICATIONS[@]};do
            # generate the names/values of the env variables for this VERB
            name=${VERB}_from   ;    vFrom="${!name}"
            name=${VERB}_level  ;   vLevel="${!name}"
            name=${VERB}_msg    ;     vMsg="${!name}"
            name=${VERB}_toast  ;   vToast="${!name}"
            name=${VERB}_trigger; vTrigger="${!name}"
            name=${VERB}_target ;  vTarget="${!name}"
            name=${VERB}_err    ;     vErr="${!name}"

            [ -n "$FORCE_FROM" ]    &&    vFrom="$FORCE_FROM"
            [ -n "$FORCE_TOAST" ]   &&   vToast="$FORCE_TOAST"
            [ -n "$FORCE_TRIGGER" ] && vTrigger="$FORCE_TRIGGER"

            case "${{ github.event_name }}" in
            #"pull_request_target") ;;
            #"push" | "workflow_dispatch") ;;
            "schedule")
              # append checkout tag and current time to Trigger text
              vTrigger="$vTrigger:$(clog bc-main-prod-tag) @ $(date +'%Y-%m-%d %T')"
              ;;
            esac

            echo "from:   $vFrom"
            echo "toast   $vToast"
            echo "trigger $vSrc"
            echo "dst     $vTarget"
            echo "errMsg  $vErr"
            echo "msg:    $vMsg"

            clog SlackLog $vLevel --from "$vFrom" --toast "$vToast" --trigger "$vTrigger" --dst "$vTarget" --errMsg "$vErr" "$vMsg" 
          done

          clog Log -I "done"
