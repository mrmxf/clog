---
# Copyright ©2017-2025  Mr MXF   info@mrmxf.com
# BSD-3-Clause License           https://opensource.org/license/bsd-3-clause/
#   _               _   _       _                           _                         
#  | |__    _   _  (_) | |   __| |           __ _    ___   | |   __ _   _ __     __ _ 
#  | '_ \  | | | | | | | |  / _` |  _____   / _` |  / _ \  | |  / _` | | '_ \   / _` |
#  | |_) | | |_| | | | | | | (_| | |_____| | (_| | | (_) | | | | (_| | | | | | | (_| |
#  |_.__/   \__,_| |_| |_|  \__,_|          \__, |  \___/  |_|  \__,_| |_| |_|  \__, |
#                                           |___/                               |___/ 
#  GitHub Workflow to build multiplatform golang executable artifacts
#
# see on.workflow_call.inputs for params

name: build-golang
run-name: 🥷${{ github.actor }} 🏃‍➡️ ${{ github.workflow }}.${{ github.job }}(clog/…/build-golang)"
env:
  CLOG_FLOW: "mrmxf/clog/.github/workflows/build-golang"

on:
  workflow_call:
    inputs:
      override:
        required: false
        type: string
      docker_ns:
        required: false
        type: string
      artifact-name:     # the name of the artifact file (absent = no artifacts)
        type: string
      make:                  # MAKE-"hugo ko" the name of bc-xxx routines to run
        type: string
      bc-from:               # slack notify: engine running the build e.g github
        type: string
      bc-toast:                         # slack notify: the pop up toast message
        type: string
      bc-trigger:                 # slack notify: repo/event triggering the flow
        type: string
    secrets:
      get_clog:                        # CLI to get the required version of clog
        required: true
      aws_access_key_id:
        required: false
      aws_secret_access_key:
        required: false
      docker_pat:                         # for logging into a docker $DOCKER_NS
        required: false
      clog_bucket:
        required: false
      s3_bucket:
        required: false
      webhook_slack:                           # webhook stub to a slack channel
        required: false

jobs:
  build-hugo:
    # don't let random strangers run the PR workflows.
    if: ${{ contains(fromJSON('["mrmxf", "charlottesweb2"]'), github.event.sender.login) || github.event_name == 'schedule' }}
    runs-on: ubuntu-latest

    steps:
      - # ---------------------------------------------------------------------
        id: init-clog
        name: init clog
        run: |
          # install clog & set up some of the funky build logic
          eval "${{ secrets.get_clog }}"

          case "${{ github.event_name }}" in

          "pull_request_target")
            # for a PR we checkout the latest pushed commit of the requesting repo
            verb="PR"
            ref="${{ github.event.pull_request.head.sha }}"            # head of the PR commits
            src="${{ github.event.pull_request.head.repo.full_name }}" # head name
            url="${{ github.event.pull_request.head.repo.html_url }}"  # head url
            ;;

          "push" | "workflow_dispatch")
            # for a PUSH we checkout the HEAD of main
            verb="PUSH"
            ref="${{ github.ref }}"                                    # event trigger
            src="${{ github.repository }}"                             # event repo
            url="${{ github.event.repository.html_url }}"              # event human url
            ;;

          "schedule")
            # for a SCHEDULE we checkout the latest production tag on main branch
            verb="SCHEDULE"
            ref="ref/tags/$(clog bc-main-prod-tag)"                    # production tag
            src="${{ github.repository }}"                             # production repo
            url="${{ github.event.repository.html_url }}"              # production human url
            ;;

          esac

          echo "verb=$verb" >> $GITHUB_ENV
          echo "ref=$ref"   >> $GITHUB_ENV
          echo "src=$src"   >> $GITHUB_ENV
          echo "url=$url"   >> $GITHUB_ENV
          
          clog Log -I "Reusable workflow: ${{ env.clog_FLOW}}"
      - # ---------------------------------------------------------------------
        id: checkout
        name: Checkout repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.src }}
          ref:  ${{ env.ref }}
          submodules: recursive
      - # ---------------------------------------------------------------------
        id: docker
        if:  inputs.docker_ns != '' # ignore if no namespace, fail if _pat empty
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{  inputs.docker_ns }}
          password: ${{ secrets.docker_pat }}
      - # ---------------------------------------------------------------------
        id: clog-setup
        name: setup tools
        run: |
          # make the artifacts folder to propagate clog workflow internals
          mkdir -p "$(dirname $(clog bc-artifacts))"

          # install tools
          clog install golang
          clog install hugo
          clog install ko
      - # ---------------------------------------------------------------------
        id: clog-build
        name: golang build artifacts with clog
        env:
          MAKE: ${{ inputs.make }}
          DOCKER_NS: ${{ inputs.docker_ns }}
        run: |          
          if [ -z "$MAKE" ]; then 
            # use the standard build if no overrides
            clog build
          else
            clog Log -W "build-hugo overide provided \$MAKE=\"$MAKE\""
            clog build MAKE "$MAKE"
          fi
      - # ---------------------------------------------------------------------
        name: tmp/ →  artifact(${{ inputs.artifact-name }})
        if: ${{ inputs.artifact-name }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          retention-days: 2
          path: tmp
      - # ---------------------------------------------------------------------
        #  log to a slack channel on success / failure
        #
        # this actions:
        # 1. source "tmp/artifacts" - pick up definitions from previous steps
        # 2. iterate over NOTIFICATIONS="BUILD DEPLOY"
        #    2.1 $BUILD_toast    # slack toast popup message
        #    2.2 $BUILD_from     # highlighted title - where did the notification come from
        #    2.3 $BUILD_level    # level e.g. -E for error, -S success, -W warning
        #    2.4 $BUILD_msg      # message / description field of slack post
        #    2.5 $BUILD_trigger  # url of the source repo/trigger
        #    2.6 $BUILD_target   # url of the destintaion repo/trigger
        #    2.6 clog SlackLog <params>
        #    2.7 repeat for  $DEPLOY_xxx etc.
        # 

        id: notify
        if: ${{ env.HOOK_SLACK != '' }}
        name: notify-team
        env:
          HOOK_SLACK:  ${{ secrets.webhook_slack }}
          FORCE_FROM: ${{ inputs.bc-from }}
          FORCE_TOAST: ${{ inputs.bc-toast }}
          FORCE_TRIGGER: ${{ inputs.bc-trigger }}
        run: |
          eval "$(clog Source project config); $(clog Crayon)"  # settings+color
          
          artifacts="$(clog bc-artifacts)"
          cat "$artifacts"                              # log the artifacts file

          eval "$(cat $artifacts)"                # create artifacts environment

          for VERB in ${NOTIFICATIONS[@]};do
            # generate the names/values of the env variables for this VERB
            name=${VERB}_from   ;    vFrom="${!name}"
            name=${VERB}_level  ;   vLevel="${!name}"
            name=${VERB}_msg    ;     vMsg="${!name}"
            name=${VERB}_toast  ;   vToast="${!name}"
            name=${VERB}_trigger; vTrigger="${!name}"
            name=${VERB}_target ;  vTarget="${!name}"
            name=${VERB}_err    ;     vErr="${!name}"

            [ -n "$FORCE_FROM" ]    &&    vFrom="$FORCE_FROM"
            [ -n "$FORCE_TOAST" ]   &&   vToast="$FORCE_TOAST"
            [ -n "$FORCE_TRIGGER" ] && vTrigger="$FORCE_TRIGGER"

            case "${{ github.event_name }}" in
            #"pull_request_target") ;;
            #"push" | "workflow_dispatch") ;;
            "schedule")
              # append checkout tag and current time to Trigger text
              vTrigger="$vTrigger:$(clog bc-main-prod-tag) @ $(date +'%Y-%m-%d %T')"
              ;;
            esac

            echo "from:   $vFrom"
            echo "toast   $vToast"
            echo "trigger $vSrc"
            echo "dst     $vTarget"
            echo "errMsg  $vErr"
            echo "msg:    $vMsg"

            clog SlackLog $vLevel --from "$vFrom" --toast "$vToast" --trigger "$vTrigger" --dst "$vTarget" --errMsg "$vErr" "$vMsg" 
          done

          clog Log -I "done"
