---
# Copyright ©2017-2025  Mr MXF   info@mrmxf.com
# BSD-3-Clause License           https://opensource.org/license/bsd-3-clause/
#   _               _   _       _                           _                         
#  | |__    _   _  (_) | |   __| |           __ _    ___   | |   __ _   _ __     __ _ 
#  | '_ \  | | | | | | | |  / _` |  _____   / _` |  / _ \  | |  / _` | | '_ \   / _` |
#  | |_) | | |_| | | | | | | (_| | |_____| | (_| | | (_) | | | | (_| | | | | | | (_| |
#  |_.__/   \__,_| |_| |_|  \__,_|          \__, |  \___/  |_|  \__,_| |_| |_|  \__, |
#                                           |___/                               |___/ 
#  GitHub Workflow to build multiplatform golang executable artifacts
#
# see on.workflow_call.inputs for params

name: build-golang
run-name: 🥷${{ github.actor }} 🏃‍➡️ ${{ github.workflow }}.${{ github.job }}(clog/…/build-golang)"
env:
  CLOG_FLOW: "mrmxf/clog/.github/workflows/build-golang"

on:
  workflow_call:
    inputs:
      override:
        required: false
        type: string
      docker_ns:
        required: false
        type: string
      artifact-name:     # the name of the artifact file (absent = no artifacts)
        type: string
      make:                  # MAKE-"hugo ko" the name of bc-xxx routines to run
        type: string
      bc-from:               # slack notify: engine running the build e.g github
        type: string
      bc-toast:                         # slack notify: the pop up toast message
        type: string
      bc-trigger:                 # slack notify: repo/event triggering the flow
        type: string
    secrets:
      get_clog:                        # CLI to get the required version of clog
        required: true
      aws_access_key_id:
        required: false
      aws_secret_access_key:
        required: false
      docker_pat:                         # for logging into a docker $DOCKER_NS
        required: false
      clog_bucket:
        required: false
      s3_bucket:
        required: false
      webhook_slack:                           # webhook stub to a slack channel
        required: false
    outputs:
      message:
        description: "Result of the build for announcing on slack"
        value: ${{ jobs.build-golang.outputs.message }}

jobs:
  build-golang:
    runs-on: ubuntu-latest
    outputs:
      message: ${{ steps.clog-build.outputs.message }}

    steps:
      - # ---------------------------------------------------------------------
        id: check
        name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - # ---------------------------------------------------------------------{{
        id: docker
        if:  inputs.docker_ns != '' # ignore this step if no namespace, fail if _pat empty
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{  inputs.docker_ns }}
          password: ${{ secrets.docker_pat }}
      - # ---------------------------------------------------------------------
        id: get-clog
        name: get clog
        env:
          GET_CLOG: ${{ secrets.get_clog }}
        run: |
          eval "$GET_CLOG"
          clog Log -I "Reusable workflow: $${{env.CLOG_FLOW}}"
      - # ---------------------------------------------------------------------
        id: clog-setup
        name: setup tools
        run: |
          clog install golang
          clog install hugo
          clog install ko
      - # ---------------------------------------------------------------------
        id: clog-build
        name: golang build artifacts with clog
        env:
          MAKE: ${{ inputs.make }}
          DOCKER_NS: ${{ inputs.docker_ns }}
        run: |
          CACHE="$(clog workflow-message-file)"
          rm -f $CACHE >/dev/null 2>&1  # delete any notify file
          
          if [ -z "$MAKE" ]; then 
            clog build
          else
            clog Log -I "build-golang overide provided \$MAKE=\"$MAKE\""
            clog build MAKE "$MAKE"
          fi

          if [ -f $CACHE ]; then
            echo "message=$(cat $CACHE)" >> $GITHUB_OUTPUT
          else
            mImage="$DOCKER_NS/${{ github.event.repository.name }}:"
            printf "message=build: $mImage, github action: ${{env.CLOG_FLOW}}" >> $GITHUB_OUTPUT
          fi
      - # ---------------------------------------------------------------------
        name: tmp/ → artifact(${{ inputs.artifact-name }})
        if: ${{ inputs.artifact-name }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          retention-days: 2
          path: tmp
      - # ---------------------------------------------------------------------
        id: notify
        if: ${{ env.HOOK_SLACK != '' }}
        name: notify-team
        env:
          MESSAGE: ${{ steps.clog-build.outputs.message }}
          ACTOR: ${{ github.actor }}
          EVENT: ${{ github.event_name }}
          JOB: ${{ github.job }}
          REPO: ${{ github.repository }}
          REF: ${{ github.ref }}
          REF_TYPE: ${{ github.ref_type }}
          WORKFLOW: ${{ github.workflow }}
          HOOK_SLACK:  ${{ secrets.webhook_slack }}
        run: |
          clog Log -I "Rx message:\n$MESSAGE"
          MSG="msg: $MESSAGE by: $ACTOR, workflow: $WORKFLOW, repo: $REPO:$REF($REF_TYPE), job: $JOB, event: $EVENT"
          clog Log -I "Tx message:\n$MSG"
          # use clog to ping slack via the webhook
          clog Slack "$MSG"
          clog Log -I "done"
