---
# yamllint disable rule:colons
#                                   _                                          _ 
#   __   ___   _ _   ___       __  | |  ___   __ _       _  _   __ _   _ __   | |
#  / _| / _ \ | '_| / -_)  _  / _| | | / _ \ / _` |  _  | || | / _` | | '  \  | |
#  \__| \___/ |_|   \___| (_) \__| |_| \___/ \__, | (_)  \_, | \__,_| |_|_|_| |_|
#                                            |___/       |__/                    
### when clog starts it uses these config values. 
###    1. clog searches for `clog.yaml` in each `clog.clogrc.search-order` folder
###    2. for every match, the config is overlaid on previous configs
###    3. recommended order: machine config, user config, project config

#                        ⇓⇓⇓⇓⇓⇓⇓           ⇓⇓⇓⇓
# ALL YAML KEYS ARE ⇒⇒ lowercase ⇔ with hyphens ⇐⇐ (not underscores) only.
#                        ⇑⇑⇑⇑⇑⇑⇑           ⇑⇑⇑⇑

# #############################################################################
#        _              
#   __  | |  ___   __ _ 
#  / _| | | / _ \ / _` |
#  \__| |_| \___/ \__, |
#                 |___/ 
# -----------------------------------------------------------------------------
clog:
  # path to the yaml file defining release history - see semver package
  releases-path: "releases.yaml"  # release & build tracking
  clogrc:
    format: yaml
    # search & load config files. Search order reset with each new config file.
    search-order:
      - /var/clogrc/clog.yaml
      - /var/clogrc/clog.yaml
      - $HOME/.config/clogrc/clog.yaml
      - ./clogrc/clog.yaml
      - ./clogrc/clog.yaml
      - .clog.yaml
  # these are the ENV variables that are searched for by various tools
  # override these to change the actual ENV variables used
  env:
    db-token: DB_ROACH
    aws:
      access: AWS_ACCESS_KEY_ID
      secret: AWS_SECRET_ACCESS_KEY
    gitlab:
      access-token: GLAT
      user: GLUSR
    github:
      access-token: GHAT
      gist-token: GHGIST
      user: GHUSR
  home-folder: set at runtime                      # detected & used internally
  jumbo:                          # clog Jumbo --help for font & style commands
    font: small
    sample: www.mrmxf.com
  log:           
    level: debug               # debug | info | warn | error - all go to stdErr
    style: pretty               # plain | pretty | json - this sets the default
  version:                                  # set at runtime via semver package
    short: "0.0.0"
    long: 0.0.0-type-hash
# #############################################################################
#        _                   ___   _                 _
#   __  | |  ___   __ _     / __| | |_    ___   __  | |__
#  / _| | | / _ \ / _` |   | (__  | ' \  / -_) / _| | / /
#  \__| |_| \___/ \__, |    \___| |_||_| \___| \__| |_\_\
#                 |___/
# -----------------------------------------------------------------------------
check:
  pre-build:
    before: eval "$(clog Inc)"
    blocks:
      - finally: clog Log -I "        branch    $(clog git branch)"
      - finally: clog Log -I "       tag-ref    $(clog git tag ref)"
      - finally: clog Log -I "      tag-head    $(clog git tag head)"
      # - finally: clog Log -I "    tag-latest    $(clog git tag latest)"
      - finally: clog Log -I "    tag-origin    $(clog git tag origin)"
      - try: '[[ "$(clog git tag head)" == "$(clog git tag ref)" ]]'
        ok: clog Log -I "Ok    tag-head == tag-ref"
        catch: clog Log -W "      tag-head != tag-ref"
      # - try: '[[ "$(clog git tag latest)" == "$(clog git tag ref)" ]]'
      #   ok: clog Log -I "Ok  tag-latest == tag-ref"
      #   catch: clog Log -W "    tag-latest != tag-ref"
      - try: '[[ "$(clog git tag origin)" == "$(clog git tag ref)" ]]'
        ok: clog Log -I "Ok  tag-origin == tag-ref"
        catch: clog Log -W "    tag-origin != tag-ref"
      - try: '[[ "$(clog git hash head)" == "$(clog git hash origin)" ]]'
        ok: clog Log -I "Ok   hash-head == hash-origin"
        catch: clog Log -W "     hash-head != hash-origin"
      # - try: '[[ "$(clog git message latest)" != "$(clog git message ref)" ]]'
      #   ok: clog Log -I "message latest == message-ref"
      #   catch: |
      #     clog Log -W "message latest != message-ref"
      #     clog Log -W "($(clog git message latest)) != ($(clog git message ref))"
      - try: clog    git tree clean
        ok: clog Log -I "Ok working tree clean"
        catch: clog Log -E "   working tree NOT clean"; exit 1
      - try: clog    git tree ahead
        ok: clog Log -I "Ok working tree not ahead of origin"
        catch: clog Log -W "   working tree is ahead of origin"
      - try: clog   git tree behind
        ok: clog Log -I "Ok working tree not behind origin"
        catch: clog Log -W "   working tree is behind origin"
      - try: clog git unstaged
        ok: clog Log -I "Ok all changes staged"
        catch: clog Log -W "   unstaged changes in working tree"
  # --- clog Check github deprecated - use the clogwork/.github/workflows/dump-context -

  tools:
      - name: golang
        try: |
          vv="$(go version|cat go.mod|grep '^go '|grep -oE '[0-9]\.[0-9]+\.[0-9]+')" 
          [[ "$vv" == "$(clog project needs golang)" ]]
        catch: clog Log -E "wrong go version. Need $(clog project needs golang)"
      - name: yq
        try: which yq 2>/dev/null
        catch: clog Log -E "yq not present.  $(clog project needs golang)"
      - name: aws cli v2
        try: |
          vv="$(aws --version 2>/dev/null|grep -oE '\/[0-9]+\.[0-9]+\.[0-9]+'|head -1|tr -d [/]|head -c 2)"
          [[ "2." != "$vv)" ]] && exit 1clog install aws"
# #############################################################################
#               _                       _
#   ||_  _ _   (_)  _ __   _ __   ___  | |_   ___
#  (_-< | ' \  | | | '_ \ | '_ \ / -_) |  _| (_-<
#  / _/ |_||_| |_| | .__/ | .__/ \___|  \__| /__/
#   ||             |_|    |_|
# -----------------------------------------------------------------------------
snippets:
  #             _
  #   ||_    __| |  ___  __ __
  #  (_-<   / _` | / -_) \ V /
  #  / _/   \__,_| \___|  \_/
  #   ||
  dev:
    godoc: godoc     -http=localhost:6060 &&     open http://localhost:6060/pkg/
    godoc-mac: godoc -http=localhost:6060 && xdg-open http://localhost:6060/pkg/
#             _              _
#   ||_    __| |  ___   __  | |__  ___   _ _
#  (_-<   / _` | / _ \ / _| | / / / -_) | '_|
#  / _/   \__,_| \___/ \__| |_\_\ \___| |_|
#   ||
  #https://www.docker.com/blog/multi-arch-images/
  docker:
    initx: |
      # install qemu to emulate arm for building
      docker run --privileged --rm tonistiigi/binfmt --install all
      docker buildx create --name army
      docker buildx use army
  #                 _   _
  #   ||_    __ _  (_) | |_
  #  (_-<   / _` | | | |  _|
  #  / _/   \__, | |_|  \__|
  #   ||    |___/
  git:
    # IMPORTANT ZSH gets confused with "--" so use always use quotes to prevent null output
    # IMPORTANT YAML may parse logical expressions into arrays of strings e.g. [ -z "foo" ]
    # IMPORTANT use quotes carefully '[ -z "foo" ]' is a shell expression [ -z "foo" ] is an array of strings
    branch: git branch --show-current
    repo: |
      url="$(git remote -v|grep 'fetch'|grep 'origin'|head -1|tail -c +7|head -c -8|xargs)"
      [[ "git" == "${url:0:3}" ]] && echo $url|grep -oE ':([^\.]+)'|tail -c +2 && exit 0
      [[ "http" == "${url:0:4}" ]] && echo $url|grep -oE '[^\/]\/[a-z].*'|tail -c +3 && exit 0
      exit 1
    # --- git hash snippets:  clog git tag <snippet> -----------------------------
    hash:
      head: git rev-list -1 HEAD
      origin: git ls-remote --head --sort=-v:refname origin | grep $(clog git branch) | head -1 | head -c 40
    # --- git message snippets:  clog git tag <snippet> -----------------------------
    message:
      latest: git log HEAD | head -5 | tail -1 | xargs
      # this is the default snippet to return the target commit message for
      # your project override in your project' clog.yaml
      ref: yq -r '.[0].note' releases.yaml
    origin: git config --get remote.origin.url
    # --- git tag snippets:  clog git tag <snippet> -----------------------------
    tag:
      head: git tag --points-at HEAD
      latest: git tag --sort=committerdate | tail -1
      origin: git ls-remote --tags --sort=-v:refname origin | head -1 | grep -oE 'v{0,1}[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-0]+){0,1}'
      # this is the default snippet to return the project's target tag
      # override in your project' clog.yaml
      # golang requires a 'v':
      # ref: echo "v$(yq -r '.[0].version' releases.yaml)"
      ref: yq -r '.[0].version' releases.yaml
      tidy: |
        eval "$(clog Inc)"  # define display functions etc.
        eval "$(clog Source project config)"
        VV="$(clog git tag ref)"
        MM="$(clog git message ref)"
        #
        clog Log -I "Retag to$cH    $VV$cX$cT $vCodeType ($cW $MM $cT)"
        # silently delete existing tag if it exists
        clog Log -I "${cC}git tag$cS -d$cH \"$VV\""
                    git tag    -d      $VV       >/dev/null 2>&1
        # set the tag to the HEAD
        clog Log -I "${cC}git tag$cS -a$cH \"$VV\"$cX$cS HEAD -m$cW \"$MM\""
                    git tag    -a      "$VV"    HEAD -m     "$MM"
        clog Log -I "${cC}git push$cS --delete$cE origin$cS \"$cH$VV\""
                    git push    --delete    origin "$VV"      >/dev/null 2>&1
        clog Log -I "${cC}git push$cE          origin$cS \"$cH$VV\""
                    git push    origin     "$VV"
    # --- git tree snippets:  clog git tree <snippet> ---------------------------
    tree:
      ahead: if [ "$(git status|grep -oE '(branch is ahead)')" ];then echo "Branch ahead - do push ";exit 1;else echo "ok";fi
      behind: if [ "$(git status|grep -oE '(merge the remote)')" ];then echo "Branch behind - do pull";exit 1;else echo "ok";fi
      clean: if [ "$(git status|grep -oE '(working tree clean)')" ];then echo "ok";else echo "Working tree not clean";exit 1;fi
    unstaged: if [ "$(git status|grep -oE '(Changes not staged)')" ];then echo "Commit unstaged changes";exit 1; else echo "ok";fi
    # deprecated - use clog git tag ref
    vcode: clog git tag ref
    # walk the parent repos to see if they're unclean
    parents: |
      eval "$(clog Inc)" # set color strings
      root=..
      [ -n "$GIT_WALK_REPOS_ROOT" ] && root="$GIT_WALK_REPOS_ROOT"
      for i in $root/* ; do
        status="  $cS clean✅$cT "
        if [ ! -d "$i/.git" ]; then
          status="   $cI skip🧱 non-git folder$cT "
        else
          cd $i
          [ -n "$(git status | grep "hange")" ] && status="$cE unclean❌$cT "
        fi
        printf "$status$i$cX\n"
      done
#          _               _            _   _
#   ||_   (_)  _ _    ___ | |_   __ _  | | | |
#  (_-<   | | | ' \  (_-< |  _| / _` | | | | |
#  / _/   |_| |_||_| /__/  \__| \__,_| |_| |_|
#   ||
  install:
    # --- snippets to check install
    # clog install have golang && echo "Yay, found it" || clog install golang
    have:
      aws: "      aws --version >/dev/null 2>&1"
      clog: "    clog --version >/dev/null 2>&1"
      curl: "    curl --version >/dev/null 2>&1"
      docker: "docker --version >/dev/null 2>&1"
      golang: "    go   version >/dev/null 2>&1"
      godoc: "  which godoc       >/dev/null 2>&1"
      golangci-lint: "golangci-lint --version >/dev/null 2>&1"
      glab: "    glab   version >/dev/null 2>&1"
      gh: "       gdh --version >/dev/null 2>&1"
      hugo: "    hugo   version >/dev/null 2>&1"
      jq: "        jq --version >/dev/null 2>&1"
      ko: "        ko   version >/dev/null 2>&1"
      nvm: "      nvm --version >/dev/null 2>&1"
      slsa-verifier: "slsa-verifier version >dev/null 2>&1"
      yarn: "    yarn --version >/dev/null 2>&1"
      yq: "        yq --version >/dev/null 2>&1"
    # install snippets --------------------------------------------------------
    aws: |
      [[ "$(dpkg --print-architecture)" == "amd64" ]] && awsZFB="x86_64"
      [[ "$(dpkg --print-architecture)" == "arm64" ]] && awsZFB="aarch64"
      curl -sL "https://awscli.amazonaws.com/awscli-exe-linux-$awsZFB.zip" -o "/tmp/awscliv2.zip"
      cd /tmp
      unzip -q ./awscliv2.zip
      sudo ./aws/install --update

    docker-engine: |
      # Add Docker's official GPG key:
      sudo apt-get -qq update; sudo apt-get -qq upgrade
      sudo apt-get install -yq ca-certificates curl
      sudo install -q -m 0755 -d /etc/apt/keyrings
      sudo curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc
      sudo chmod a+r /etc/apt/keyrings/docker.asc
      # Add the repository to Apt sources:
      arch="$(dpkg --print-architecture)"
      DEBy=$(. /etc/os-release && echo "$VERSION_CODENAME")
      echo  "deb [arch=$arch signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian  $DEBy stable"|sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      sudo apt-get -qq update
      sudo apt-get install -yq --autoremove docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
      sudo usermod -aG docker $USER
      newgrp docker
      docker run hello-world
    golang: 'echo download go1.23.0.linux-amd64.tar.gz and run: "rm -rf /usr/local/go && tar -C /usr/local -xzf go1.23.0.linux-amd64.tar.gz"'
    golang-mac: brew install go
    godoc: "go install golang.org/x/tools/cmd/godoc@latest"
    golangci-lint: "curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.60.1"
    glab: |
      V="$(glab release list --repo gitlab-org/cli 2>/dev/null|grep ago|grep -oE '[0-9]+\.[0-9]+\.[0-9]+'|head -1)"
      [ -z "V" ] && V="1.48.0"
      url="https://gitlab.com/gitlab-org/cli/-/releases/v${V}/downloads/glab_${V}_linux_amd64.deb"
      echo "installing version \"$V\" from $url"
      curl -L $url -o /tmp/glab.deb && sudo apt-get install /tmp/glab.deb
    glab-mac: "brew install glab"
    gh: |
      (type -p wget >/dev/null || (sudo apt update && sudo apt-get install wget -y)) \
      && sudo mkdir -p -m 755 /etc/apt/keyrings \
      && wget -qO- https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null \
      && sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg \
      && echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
      && sudo apt update \
      && sudo apt install gh -y
    gh-mac: brew install gh
    git: sudo apt-get install -y git-all
    homebrew: |
      [[ "$(uname -m)" == "arm64" ]] && clog Log -W "arm is badly supported!"
      sudo apt-get install -y build-essential procps curl file git
      curl -fSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh | bash
    hugo: |
      eval "$(clog Inc)"
      j="$(curl -sL https://api.github.com/repos/gohugoio/hugo/releases/latest)"
      pkg=".deb"
      arch="arm" ; [[ "$(uname -m)" == "x86_64" ]] && arch="amd64"
      v="$(   echo $j | jq -r '.name   | ltrimstr("v")')"
      urls="$(echo $j | jq -r '.assets | .[] | [.name, .browser_download_url] | .[1]')"
      # get the first release with "extended" this should ignore the withdeploy options
      url="$(echo "$urls" | grep "$v" | grep "$pkg" | grep "$arch" | grep "extended" | head -1)"
      # echo "$urls"
      current="$(hugo version 2>/dev/null|grep -oE '[0-9]\.[0-9]+\.[0-9]')"
      [[ "$v" == "$current" ]] && clog Log -I "hugo $v already installed" && exit 0
      [ -n "$current" ] && clog Log -W "upgrade hugo from$cS $current$cT to $cW $v"
      clog Log -I ""
      clog Log -I "filter $(echo "$urls"|wc -l) installers for ($v)($pkg)($arch)(extended)[0]"
      clog Log -I "installing $cF $url"
      curl -sL "$url" > /tmp/hugo.deb
      sudo apt-get install -y /tmp/hugo.deb
    jq: sudo apt-get install -y jq
    ko: |
      # check that slsa-verifier is installed
      which slsa-verifier > /dev/null 2>&1 || clog install slsa-verifier
      # process the releases of the ko repo
      vURL=https://api.github.com/repos/ko-build/ko/releases/latest
      j="$(curl -sL $vURL)"
      pkg=".tar.gz"
      arch="arm" ; [[ "$(uname -m)" == "x86_64" ]] && arch="x86_64"
      os="$(uname -s)"
      v="$(   echo $j | jq -r '.name   | ltrimstr("v")')"
      urls="$(echo $j | jq -r '.assets | .[] | [.name, .browser_download_url] | .[1]')"
      url="$(echo "$urls" | grep "$v" | grep "$pkg" | grep "$arch" | grep -i "$os" | head -1)"
      # printf "from=%s\nurl=%s\npkg=%s\narch=%s\nos=%s\nv=%s\n" "$vURL" "$url" "$pkg" "$arch" "$os" "$v" && exit 0
      TMP="/tmp/ko.tar.gz"
      SIG="/tmp/multiple.intoto.jsonl"
      DST="/usr/local/bin/ko"
      curl -sSfL "$url" > "$TMP"
      curl -sSfL https://github.com/ko-build/ko/releases/download/v$v/multiple.intoto.jsonl > "$SIG"
      slsa-verifier verify-artifact --provenance-path "$SIG" --source-uri github.com/ko-build/ko --source-tag "v${v}" "$TMP"
      sudo tar -xzf "$TMP" --directory /usr/local/bin/ &&  sudo chmod +x "$DST"
    kubectl: |
      sudo apt-get update
      # apt-transport-https may be a dummy package; if so, you can skip that package
      sudo apt-get install -y apt-transport-https ca-certificates curl gnupg
      # If the folder `/etc/apt/keyrings` does not exist, it should be created before the curl command, read the note below.
      # sudo mkdir -p -m 755 /etc/apt/keyrings
      curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      sudo chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg # allow unprivileged APT programs to read this keyring
      # This overwrites any existing configuration in /etc/apt/sources.list.d/kubernetes.list
      echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
      sudo chmod 644 /etc/apt/sources.list.d/kubernetes.list   # helps tools such as command-not-found to work correctly
      sudo apt-get update
      sudo apt-get install -y kubectl
    minikube: |
      curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 \
      && sudo install minikube-linux-amd64 /usr/local/bin/minikube
    nginx: |
      sudo apt-get -qq update;  sudo apt-get -yq upgrade
      sudo apt-get install -yq nginx
      if [ -n "$(which ufw)" ]; then
        sudo ufw allow "Nginx Full" > /dev/null   # Allow HTTP, HTTPS
        sudo ufw reload
      fi
      sudo chown -R $USER:$USER /var/www
      # give some status & check config
      systemctl status nginx | grep "Active"
      sudo nginx -t
      if [[ $? -gt 0 ]] ; then
          clog Log -E "$cE nginx -t$cT shows config doesn't work - try again"
      else
          #restart nginx
          sudo systemctl -q restart nginx
      fi
    node-red: docker run --detach -p 1880:1880 -v $HOME/.node-red:/data --name nodered --rm nodered/node-red
    nvm: curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
    slsa-verifier: |
      vURL=https://api.github.com/repos/slsa-framework/slsa-verifier/releases/latest
      j="$(curl -sL $vURL)"
      pkg=""
      arch="arm" ; [[ "$(uname -m)" == "x86_64" ]] && arch="amd64"
      os="$(uname -s)"
      v="$(   echo $j | jq -r '.name   | ltrimstr("v")')"
      urls="$(echo $j | jq -r '.assets | .[] | [.name, .browser_download_url] | .[1]')"
      url="$(echo "$urls" | grep "$v" | grep "$pkg" | grep "$arch" | grep -i "$os" | head -1)"
      # printf "from=%s\nurl=%s\npkg=%s\narch=%s\nos=%s\nv=%s\n" "$vURL" "$url" "$pkg" "$arch" "$os" "$v" && exit 0
      TMP="/tmp/slsa"
      DST="/usr/local/bin/slsa-verifier"
      curl -sSfL "$url" > "$TMP"
      sudo mv "$TMP" "$DST" && sudo chmod +x "$DST"
    snap: sudo apt install -y snapd
    yarn: npm install --global yarn && echo "PATH=\"$PATH:$(yarn global bin)\"" >> ~/.bashrc
    yq: |
      arch="arm64" ; [[ "$(uname -m)" == "x86_64" ]] && arch="amd64"
      sudo curl -Ls --output /usr/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_$arch
      sudo chmod +x /usr/bin/yq
# 
#   ||_    _ __    _  _
#  (_-<   | '  \  | || |
#  / _/   |_|_|_|  \_, |
#   ||             |__/
  my:
    ip: curl -s wtfismyip.com/text
    uid: echo $UID
    usr: echo $USER
    home: echo ~
    wslusr: echo "$(wslvar USERPROFILE)"
    wslhome: echo "$(wslpath "$(wslvar USERPROFILE)")" 
#                               _              _
#   ||_    _ __   _ _   ___    (_)  ___   __  | |_
#  (_-<   | '_ \ | '_| / _ \   | | / -_) / _| |  _|
#  / _/   | .__/ |_|   \___/  _/ | \___| \__|  \__|
#   ||    |_|                |__/
  # typically used for global tool version propagation, node version etc.
  project:
    needs:
      golang: cat go.mod|grep '^go '|grep -oE '[0-9]\.[0-9]+\.[0-9]+'
      hugo: hugo config --format yaml|yq -r '.module.hugoversion.min'|cut -c 2-20
      node: echo "23.8.0"

# #############################################################################
#                 _
#   _ _    __ _  (_)  _ _   __ __
#  | ' \  / _` | | | | ' \  \ \ /
#  |_||_| \__, | |_| |_||_| /_\_\
#         |___/
# #############################################################################
# --- nginx installation configuration ----------------------------------------
# these defaults correspond to the apt package defaults
nginx:
  configPath: embed
  shellsnippets: []
  folder:
    available: /etc/nginx/sites-available/
    enabled: /etc/nginx/sites-enabled/

# #############################################################################
#
#   ___ __ __  __
#  (_-< \ V / / _|
#  /__/  \_/  \__|
# #############################################################################
# --- svc is a chi based website using cloglib/clogsvc ----------------------------
svc:
  config-path: embed
  port: 11998
  configFileName: server.config.yaml
  # use the main env variable name unless overriden by the svc for web ops
  env:
    dbConnectionString: DB_CON_STR_CLOGSVC

  db:
    type: sqlite
    #if no connection details specified then use env.dbConnectionString
    defaultPageLimit: 20
    defaultSort: CreatedAt
  homeFolder: set-at-runtime
  version:
    short: "0.0.0"
    long: 0.0.0-gitcommit

  # webhook handling
  # format: https://some-host.dns/a/hook/hookType/{source}/{project}/{semver}
  # format: https://some-host.dns/a/hook/cicd/gitlab-deploy/$PROJECT/$(clog git tag ref)
  hookprefix: "/hook"
  hooks:
    # params for responding to /hook/website/{id}
    - prefix: /website/staging/{id}
      ruleName: Test staging website
      something: Another property
      somevalue: 600
      somearray: [1, 2, 3, 4]
# #############################################################################
