---
# yamllint disable rule:colons
#        _                                                 _
#   __  | |  ___   __ _   ___   ___  __ _   _ __    _ __  | |  ___
#  / _| | | / _ \ / _` | |___| (_-< / _` | | '  \  | '_ \ | | / -_)
#  \__| |_| \___/ \__, |       /__/ \__,_| |_|_|_| | .__/ |_| \___|
#                 |___/                            |_|
# Values in this file are specific to building your project
#
# use  `clog Init`   to copy the core init into folder clogrc
#                      ⇓⇓⇓⇓⇓⇓⇓⇓⇓
# ALL KEYS ARE    ⇒⇒  lowercase    ⇐⇐  only. THIS IS A VIPER SETTING.
#                      ⇑⇑⇑⇑⇑⇑⇑⇑⇑
# #############################################################################
#                      __   _
#   __   ___   _ _    / _| (_)  __ _
#  / _| / _ \ | ' \  |  _| | | / _` |
#  \__| \___/ |_||_| |_|   |_| \__, |
#                              |___/
# -----------------------------------------------------------------------------
clog:
  # path to the yaml file defining release history - see semver package
  releases-path: "releases.yaml"

# #############################################################################
#               _                       _
#   ||_  _ _   (_)  _ __   _ __   ___  | |_   ___
#  (_-< | ' \  | | | '_ \ | '_ \ / -_) |  _| (_-<
#  / _/ |_||_| |_| | .__/ | .__/ \___|  \__| /__/
#   ||             |_|    |_|
# -----------------------------------------------------------------------------
snippets:
  # build control logic for this repo - all commands start with bc
  # dev or prod rules:
  #     default - always dev unless build: prod in bc-releases-yaml
  #     rules
  #       - build+deploy- if github_event=="create" then checkout to main
  #       - prod deploy - main branch or empty(default) branch only
  #       - prod deploy - main repo (not fork) only
  #     override
  #       - MAKE prod - forces production (and overrides MAKE dev)
  #       - MAKE dev  - forces development
  # clog bc-prod-logic-xx returns    "dev|prod"+"(reasonString)"
  bc-releases-yaml: yq -r '.clog."releases-path"' clogrc/clog.yaml
  bc-main-repo: echo "mrmxf/clog"
  bc-prod-logic-build: |
    do="$(yq -r '.[0].build|select(.=="prod")' "$(clog bc-releases-yaml)")"
    [ -z "$do" ] && do="dev(from releases.yaml)" || do="prod(from releases.yaml)" 

    # rules - ensure valid brach for workflow
    [[ "create" == "$GITHUB_EVENT_NAME " ]] && git checkout main
    # overrides always win - prod override strongest
    clog Should MAKE "dev" && do="dev(forced by MAKE)"
    clog Should MAKE "prod" && do="prod(forced by MAKE)"
    echo "$do"
  bc-prod-logic-deploy: |
    do="$(yq -r '.[0].build|select(.=="prod")' "$(clog bc-releases-yaml)")"
    [ -z "$do" ] && do="dev(from releases.yaml)" || do="prod(from releases.yaml)" 
    # rules
    [[ "create" == "$GITHUB_EVENT_NAME " ]] && git checkout main
    [ -n "$(clog git branch)" ] && [[ "$(clog git branch)" != "main" ]] && do="dev(not main branch)"
    [[ "$(clog bc-main-repo)" != "$(clog git repo)" ]] && do="dev(repo!=$(clog bc-main-repo))"
    # overrides always win - prod override strongest
    clog Should MAKE "dev" && do="dev(forced by MAKE)"
    clog Should MAKE "prod" && do="prod(forced by MAKE)"
    echo "$do"
  bc-wants-stage-flow:  yq -r '.[0].flow|select(.=="stage")' "$(clog bc-releases-yaml)"
  bc-wants-test-flow:  yq -r '.[0].flow|select(.=="test")' "$(clog bc-releases-yaml)"
  bc-wants-schedule-flow:  yq -r '.[0].flow|select(.=="schedule")' "$(clog bc-releases-yaml)"
  bc-log-hr: eval "$(clog Crayon)";for i in {1..8};do HR="$HR\e[09${i}m▬▬▬▬▬▬▬▬▬$cE|";done;printf "$HR$cX\n"

  # ---------------------------------------------------------------------------------------------------------
  git:
    tag:
      ref: echo "v$(yq -r '.[0].version' "$(clog bc-releases-yaml)")" #add a v for golang
      refgo: echo "v$(clog git tag ref)"    
    message:
      ref: yq -r '.[0].note' "$(clog bc-releases-yaml)"
  suffix: |
    b="$(git branch --show-current)"
    [[ "$b" == main ]] && echo "" || echo "$b"|tr -d '[:blank:]'
  project:
    config: |
      # make some variables for standard build scripts
      export PROJECT=clog                            # project you're building
    has:
      # git-lfs: |
      #   git lfs --version 2>/dev/null|grep -oE '[0-9]+\.[0-9]+\.[0-9]+'|head -1
      golang: |
        go version|grep -oE '[0-9]+\.[0-9]+\.[0-9]+'
    needs:
      # git-lfs: echo "3.6.1"
      # grab the golang version from go.mod
      golang: cat go.mod|grep '^go '|grep -oE '[0-9]\.[0-9]+\.[0-9]+'
  argstest: |
    echo "MAKE=($1) ($2) ($3) ($4)"
    echo "Another line"
    echo "$1 is still one"

  build: |
    export VERB="Build"
    export CHK="pre-build build"
    export MAKE="golang"; [[ "MAKE" == "$1" ]] && MAKE="$2"
    export EXE="clog"
    export TITLE="Command Line Of Go"
    clog bc-flowx                     # use the generic flow script
    
  deploy: |
    export VERB="Deploy"
    export CHK="pre-build tools deploy"
    export MAKE="deploy-github"; [[ "MAKE" == "$1" ]] && MAKE="$2"
    export EXE="clog"
    export TITLE="Command Line Of Go"
    clog bc-flowx                     # use the generic flow script

# #############################################################################
#        _                   ___   _                 _
#   __  | |  ___   __ _     / __| | |_    ___   __  | |__
#  / _| | | / _ \ / _` |   | (__  | ' \  / -_) / _| | / /
#  \__| |_| \___/ \__, |    \___| |_||_| \___| \__| |_\_\
#                 |___/
# -----------------------------------------------------------------------------
check:
  tools:
    blocks:
      - try: |
          vgo="$(go version|cat go.mod|grep '^go '|grep -oE '[0-9]\.[0-9]+\.[0-9]+')" 
          [[ "$vgo" == "$(clog project needs golang)" ]]
        catch: clog Log -E "wrong go version. Need $(clog project needs golang)"
  build:
    blocks:
      - try: go test
        catch: clog Log -E "go test failed"
  # --- clog Check deploy -----------------------------------------------------
  deploy:
    blocks:
      # beware the first block needs double quotes or it becomes an array!
      - try: |  # in github actions, the bucket env is S3_BUCKET unless overridden
          [ -n "$GITHUB_ACTIONS" ] && [ -z "$CLOG_BUCKET" ] && CLOG_BUCKET="$S3_BUCKET"
          [ -n \"$CLOG_BUCKET\" ]
        ok: |
          [ -z "$GITHUB_ACTIONS" ] && clog Log -I "\$CLOG_BUCKET ok" && exit 0
          [ -n "$CLOG_BUCKET" ]    && clog Log -I "\$CLOG_BUCKET ok" && exit 0
          clog Log -W "\$CLOG_BUCKET is \"\", using \$S3_BUCKET \"$S3_BUCKET\""
        catch: |
          [ -z "$GITHUB_ACTIONS" ] && clog Log -E "\$CLOG_BUCKET not set - cannot deploy" && exit 1
          [ -n "$CLOG_BUCKET" ]    && clog Log -I "\$CLOG_BUCKET invalid - cannot deploy" && exit 1
          clog Log -W "\$CLOG_BUCKET is \"\", using \$S3_BUCKET \"$S3_BUCKET\"  - cannot deploy" && exit 1
      - try: aws --version 2>/dev/null| grep aws-cli/2. | head -c 10
        ok: clog Log -I "aws cli v2 ok"
        catch: clog Log -E "aws cli v2 not installed - try clog install aws"
      - try: aws s3 cp --dryrun LICENSE s3://$CLOG_BUCKET/LICENSE
        ok: clog Log -I "aws s3 write access to bucket ok"
        catch: clog Log -E "aws s3 cli - cannot test-write to s3://\$CLOG_BUCKET/LICENSE (s3://$CLOG_BUCKET/LICENSE)"
      - try: go test
        ok: clog Log -I "go test passed"
        catch: clog Log -E "go test failed"
